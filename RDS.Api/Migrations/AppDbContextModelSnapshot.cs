// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RDS.Api.Data;

#nullable disable

namespace RDS.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("IdentityRoleClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityClaim", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityUserLogin", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<string>("Name")
                        .HasMaxLength(180)
                        .HasColumnType("nvarchar(180)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("IdentityUserToken", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(5);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(2);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(3);

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("IdentityRole", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INT")
                        .HasColumnOrder(19);

                    b.Property<DateOnly?>("BirthDate")
                        .HasColumnType("DATE")
                        .HasColumnOrder(9);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnOrder(13);

                    b.Property<string>("Cpf")
                        .HasMaxLength(11)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(8);

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("DATETIME")
                        .HasColumnOrder(10);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(4);

                    b.Property<bool>("EmailConfirmed")
                        .HasMaxLength(1)
                        .HasColumnType("BIT")
                        .HasColumnOrder(6);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("BIT")
                        .HasColumnOrder(18);

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("DATETIMEOFFSET")
                        .HasColumnOrder(17);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(7);

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(5);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(3);

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnOrder(11);

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(14);

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("BIT")
                        .HasColumnOrder(15);

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR(MAX)")
                        .HasColumnOrder(12);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("BIT")
                        .HasColumnOrder(16);

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR")
                        .HasColumnOrder(2);

                    b.HasKey("Id");

                    b.HasIndex("Cpf")
                        .IsUnique()
                        .HasFilter("[Cpf] IS NOT NULL");

                    b.HasIndex("Name");

                    b.HasIndex("NormalizedEmail")
                        .IsUnique();

                    b.HasIndex("NormalizedUserName");

                    b.HasIndex("PhoneNumber");

                    b.ToTable("IdentityUser", (string)null);

                    b.HasDiscriminator().HasValue("ApplicationUser");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserAddress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIGINT")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Complement")
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(8)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("CHAR");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("NVARCHAR");

                    b.Property<short>("TypeOfAddress")
                        .HasMaxLength(1)
                        .HasColumnType("SMALLINT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("PostalCode");

                    b.HasIndex("Street");

                    b.HasIndex("UserId");

                    b.ToTable("Address", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ApplicationUserId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "RoleId", "CompanyId");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("IdentityUserRole", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserTelephone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("NVARCHAR");

                    b.Property<short>("Type")
                        .HasColumnType("SMALLINT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Telephone", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Category", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyId")
                        .HasColumnType("BIGINT");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Company.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<long>("OwnerId")
                        .HasColumnType("BIGINT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Company", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Company.CompanyUser", b =>
                {
                    b.Property<long>("CompanyId")
                        .HasColumnType("BIGINT");

                    b.Property<long>("UserId")
                        .HasColumnType("BIGINT");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("BIT");

                    b.HasKey("CompanyId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyUser", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<long>("CompanyId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("DATETIME");

                    b.Property<string>("ExternalReference")
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<byte>("Gateway")
                        .HasColumnType("TINYINT");

                    b.Property<string>("Number")
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<byte>("Status")
                        .HasColumnType("TINYINT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Reports.ExpensesByCategory", b =>
                {
                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("Expenses")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.ToTable((string)null);

                    b.ToView("vwGetExpensesByCategory", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Reports.IncomesAndExpenses", b =>
                {
                    b.Property<decimal>("Expenses")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<decimal>("Incomes")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<int>("Month")
                        .HasColumnType("INT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.ToTable((string)null);

                    b.ToView("vwGetIncomesAndExpenses", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Reports.IncomesByCategory", b =>
                {
                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<decimal>("Incomes")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(160)
                        .HasColumnType("VARCHAR");

                    b.Property<int>("Year")
                        .HasColumnType("INT");

                    b.ToTable((string)null);

                    b.ToView("vwGetIncomesByCategory", (string)null);
                });

            modelBuilder.Entity("RDS.Core.Models.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18, 2)");

                    b.Property<long>("CategoryId")
                        .HasColumnType("bigint");

                    b.Property<long>("CompanyId")
                        .HasColumnType("BIGINT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("PaidOrReceivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("NVARCHAR");

                    b.Property<short>("Type")
                        .HasColumnType("SMALLINT");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Title");

                    b.ToTable("Transaction", (string)null);
                });

            modelBuilder.Entity("RDS.Api.Models.User", b =>
                {
                    b.HasBaseType("RDS.Core.Models.ApplicationUser.ApplicationUser");

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationRole", b =>
                {
                    b.HasOne("RDS.Api.Models.User", null)
                        .WithMany("Roles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserAddress", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("Address")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserRole", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUserTelephone", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("Telephone")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDS.Core.Models.Company.Company", b =>
                {
                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("RDS.Core.Models.Company.CompanyUser", b =>
                {
                    b.HasOne("RDS.Core.Models.Company.Company", "Company")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RDS.Core.Models.ApplicationUser.ApplicationUser", "User")
                        .WithMany("CompanyUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RDS.Core.Models.Transaction", b =>
                {
                    b.HasOne("RDS.Core.Models.Category", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RDS.Core.Models.ApplicationUser.ApplicationUser", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("CompanyUsers");

                    b.Navigation("Telephone");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("RDS.Core.Models.Category", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("RDS.Core.Models.Company.Company", b =>
                {
                    b.Navigation("CompanyUsers");
                });

            modelBuilder.Entity("RDS.Api.Models.User", b =>
                {
                    b.Navigation("Roles");
                });
#pragma warning restore 612, 618
        }
    }
}
